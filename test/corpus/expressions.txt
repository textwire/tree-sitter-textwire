==================
Addition infix expression
==================
{{ 1 + 2 }}
---

(program
    (brace_statement
        (infix_expression
            (plus 
                left: (integer_literal)
                right: (integer_literal)))))

==================
Multiplication infix expression
==================
{{ 3 * 1 }}
---

(program
    (brace_statement
        (infix_expression
            (multiply 
                left: (integer_literal)
                right: (integer_literal)))))

==================
Division infix expression
==================
{{ 3.3 / 1.3 }}
---

(program
    (brace_statement
        (infix_expression
            (divide 
                left: (float_literal)
                right: (float_literal)))))

==================
Subtraction infix expression
==================
{{ 3.0 - 1.0 }}
---

(program
    (brace_statement
        (infix_expression
            (minus 
                left: (float_literal)
                right: (float_literal)))))

==================
Modulo infix expression
==================
{{ 3 % 1 }}
---

(program
    (brace_statement
        (infix_expression
            (modulo 
                left: (integer_literal)
                right: (integer_literal)))))

==================
Less than infix expression
==================
{{ x < y }}
---

(program
    (brace_statement
        (infix_expression
            (less 
                left: (identifier)
                right: (identifier)))))

==================
Greater than infix expression
==================
{{ 3 > 1 }}
---

(program
    (brace_statement
        (infix_expression
            (greater 
                left: (integer_literal)
                right: (integer_literal)))))

==================
Prefix expression
==================
{{ !true }}
---

(program
    (brace_statement
        (prefix_expression
            (prefix_not
                (boolean_literal)))))

==================
Prefix and infix expressions
==================
{{ -10 + 5 }}
---

(program
    (brace_statement
        (infix_expression
            (plus
                (prefix_expression
                    (prefix_minus
                        (integer_literal)))
                (integer_literal)))))

==================
Dot expression
==================
{{ user.name }}
---

(program
    (brace_statement
        (dot_expression
            left: (identifier)
            key: (identifier))))

==================
Call expression with no arguments
==================
{{ "Hello World!".upper() }}
---

(program
    (brace_statement
        (call_expression
            receiver: (string_literal)
            function: (identifier))))

==================
Call expression with arguments
==================
{{ 'hello world'.split(' ') }}
---

(program
    (brace_statement
        (call_expression
            receiver: (string_literal)
            function: (identifier)
            arguments: (argument_list
                (string_literal)))))

==================
Increment postfix expression
==================
{{ num++ }}
---

(program
    (brace_statement
        (postfix_increment
            left: (identifier))))

==================
Decrement postfix expression
==================
{{ num-- }}
---

(program
    (brace_statement
        (postfix_decrement
            left: (identifier))))

==================
Infix with postfix expression
==================
{{ 1.2 + num-- }}
---

(program
    (brace_statement
        (infix_expression
            (plus 
                left: (float_literal)
                right: (postfix_decrement
                        left: (identifier))))))

==================
Ternary expression
==================
{{ true ? 2 : 3.0 }}
---

(program
    (brace_statement
        (ternary_expression
            condition: (boolean_literal)
            consequence: (integer_literal)
            alternative: (float_literal))))

==================
Nested ternary expression
==================
{{ true ? 2 : (false ? 2.0 : true) }}
---

(program
    (brace_statement
        (ternary_expression
            condition: (boolean_literal)
            consequence: (integer_literal)
            alternative: (ternary_expression
                condition: (boolean_literal)
                consequence: (float_literal)
                alternative: (boolean_literal)))))

==================
Nested ternary expression
==================
<span>{{ (1 == 1) ? true : false }}</span>
---

(program
    (brace_statement
        (ternary_expression
            condition: (boolean_literal)
            consequence: (integer_literal)
            alternative: (ternary_expression
                condition: (boolean_literal)
                consequence: (float_literal)
                alternative: (boolean_literal)))))
